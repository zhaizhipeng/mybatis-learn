<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ysdrzp.dao.IUserDao">
    <!-- 开启二级缓存的支持 -->
    <cache></cache>

    <!-- 建立 User 实体和数据库表的对应关系
        type 属性：指定实体类的全限定类名
        id 属性：给定一个唯一标识，是给查询 select 标签引用用的。-->
    <!--<resultMap type="user" id="userMap">
        <id column="id" property="id"/>
        <result column="username" property="userName"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>
        <result column="birthday" property="birthday"/>
    </resultMap>-->

    <!-- 配置查询所有操作 -->
    <!--<select id="findAll" resultMap="userMap">
        select * from user
    </select>-->

    <resultMap type="user" id="userMap">
        <id column="id" property="id"></id>
        <result column="username" property="userName"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        <!-- collection 是用于建立一对多中集合属性的对应关系
        ofType 用于指定集合元素的数据类型
        select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）
        column 是用于指定使用哪个字段的值作为条件查询
        -->
        <collection property="accounts" ofType="account"
                    select="com.ysdrzp.dao.IAccountDao.findByUid"
                    column="id">
        </collection>
    </resultMap>

    <!-- 配置查询所有操作 -->
    <select id="findAll" resultMap="userMap">
        select * from user
    </select>

    <!--<resultMap type="user" id="userMap">
        <id column="id" property="id"></id>
        <result column="username" property="userName"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        &lt;!&ndash; collection 是用于建立一对多中集合属性的对应关系
        ofType 用于指定集合元素的数据类型
        &ndash;&gt;
        <collection property="accounts" ofType="account">
            <id column="aid" property="id"/>
            <result column="uid" property="uid"/>
            <result column="money" property="money"/>
        </collection>
    </resultMap>-->

    <!-- 配置查询所有操作 -->
    <!--<select id="findAll" resultMap="userMap">
        select u.*,a.id as aid ,a.uid,a.money from user u left outer join account a on u.id =a.uid
    </select>-->

    <!-- 根据 id 查询 -->
    <select id="findById" resultType="user" parameterType="int" useCache="true">
        select * from user where id = #{uid}
    </select>

    <!-- 保存用户-->
    <!--<insert id="saveUser" parameterType="user">
        insert into user(username,birthday,sex,address)
        values(#{username},#{birthday},#{sex},#{address})
    </insert>-->

    <insert id="saveUser" parameterType="user">
        <!-- 配置保存时获取插入的 id -->
        <selectKey keyColumn="id" keyProperty="id" resultType="int">
            select last_insert_id();
        </selectKey>
        insert into user(username,birthday,sex,address)
        values(#{userName},#{birthday},#{sex},#{address})
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="user">
        update user set username = #{userName},birthday = #{birthday},sex = #{sex},
        address = #{address} where id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{uid}
    </delete>

    <!-- 根据名称模糊查询 -->
    <!--<select id="findByName" resultType="user" parameterType="String">
        select * from user where username like #{username}
    </select>-->

    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="string" resultType="user">
        select * from user where username like '%${value}%'
    </select>

    <!-- 查询总记录条数 -->
    <select id="findTotal" resultType="int">
        select count(*) from user;
    </select>

    <!-- 根据用户名称模糊查询，参数变成一个 QueryVo 对象了 -->
    <select id="findByVo" parameterType="com.ysdrzp.model.QueryVo" resultType="user">
        select * from user where username like concat(#{user.username},'%')
    </select>

    <!--<select id="findByUser" resultType="user" parameterType="user">
        select * from user where 1=1
        <if test="userName!=null and userName != '' ">
            and username like #{userName}
        </if>
        <if test="address != null">
            and address like #{address}
        </if>
    </select>-->

    <!-- 根据用户信息查询 -->
    <select id="findByUser" resultType="user" parameterType="user">
        <include refid="defaultSql"></include>
        <where>
            <if test="userName!=null and userName != '' ">
                and username like #{userName}
            </if>
            <if test="address != null">
                and address like #{address}
            </if>
        </where>
    </select>

    <!-- 查询所有用户在 id 的集合之中 -->
    <select id="findInIds" resultType="user" parameterType="queryvo">
        <!--select * from user where id in (1,2,3,4,5); -->
        select * from user
        <where>
            id in
            <if test="ids != null and ids.size() > 0">
                <foreach collection="ids" open="( " close=")" item="item" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <!-- 抽取重复的语句代码片段 -->
    <sql id="defaultSql">
        select * from user
    </sql>

</mapper>